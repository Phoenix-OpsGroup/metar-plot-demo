{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","button","width","height","title","textarea","buttonContainer","display","flexDirection","form","margin","padding","results","gridTemplateColumns","gridGap","resultTitle","flexgrow","App","metar","svg","classes","useState","raw","setRaw","JSON","stringify","METAR","blob","Blob","rawMetarToSVG","type","URL","createObjectURL","e","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Paper","elevation","TextField","id","label","onChange","event","target","value","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAWMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,SAAU,GAEZC,OAAQ,CACNC,MAAO,OACPC,OAAQ,QAEVC,MAAO,CACLJ,SAAU,GAEZK,SAAU,CACRH,MAAO,QAETI,gBAAiB,CACfC,QAAS,OACTL,MAAO,OACPF,SAAU,EACVQ,cAAe,eAEjBC,KAAM,CACJC,OAAQ,OACRC,QAAS,QAEXC,QAAS,CACPL,QAAS,OACTM,oBAAqB,UACrBC,QAAS,OACTJ,OAAQ,QAEVK,YAAa,CACXL,OAAQ,MACRM,SAAU,QAKD,SAASC,IACtB,IAEIC,EACAC,EAHEC,EAAUzB,IAChB,EAAsB0B,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KAGA,IACEL,EAAQM,KAAKC,UAAU,IAAIC,QAAMJ,GAAM,KAAM,GAC7C,IAAIK,EAAO,IAAIC,KAAK,CAACC,wBAAcP,EAAK,OAAQ,SAAU,CAACQ,KAAM,kBACjEX,EAAMY,IAAIC,gBAAgBL,GAC3B,MAAMM,GACLf,EAAQ,gBACRC,EAAM,GAER,OACE,sBAAKe,UAAWd,EAAQrB,KAAxB,UACE,cAACoC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,aAAW,OAApD,SACE,cAAC,IAAD,MAEF,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWd,EAAQhB,MAA5C,kCAKJ,cAACwC,EAAA,EAAD,CAAOC,UAAW,EAAGX,UAAWd,EAAQX,KAAxC,SACE,qBAAKyB,UAAWd,EAAQhB,MAAxB,SACE,cAAC0C,EAAA,EAAD,CAAWZ,UAAWd,EAAQf,SAAUmC,MAAM,UAAUO,GAAG,eAAeC,MAAM,YAAYL,QAAQ,SAASM,SAAU,SAACC,GAAW3B,EAAO2B,EAAMC,OAAOC,cAG3J,sBAAKlB,UAAWd,EAAQR,QAAxB,UACE,eAACgC,EAAA,EAAD,CAAOC,UAAW,EAAlB,UACE,cAACH,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWd,EAAQL,YAA5C,0BAGA,cAAC2B,EAAA,EAAD,CAAYC,QAAQ,QAAQT,UAAWd,EAAQL,YAA/C,SACE,8BAAMG,SAGV,eAAC0B,EAAA,EAAD,CAAOC,UAAW,EAAlB,UACE,cAACH,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWd,EAAQL,YAA5C,wBAGA,qBAAKsC,IAAKlC,aC1FpB,IAYemC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAChD,EAAD,MAEFiD,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.16717f91.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\nimport {METAR, rawMetarToSVG} from 'metar-plot'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport WbSunnyIcon from '@material-ui/icons/WbSunny';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    button: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    title: {\n      flexGrow: 1,\n    },\n    textarea: {\n      width: \"100%\"\n    },\n    buttonContainer: {\n      display: \"flex\",\n      width: \"100%\",\n      flexGrow: 1,\n      flexDirection: \"row-reverse\"\n    },\n    form: {\n      margin: \"64px\",\n      padding: \"16px\",\n    },\n    results: {\n      display: \"grid\",\n      gridTemplateColumns: \"1fr 1fr\",\n      gridGap: \"10px\",\n      margin: \"64px\",\n    },\n    resultTitle: {\n      margin: \"8px\",\n      flexgrow: 1\n    }\n  }),\n);\n\nexport default function App() {\n  const classes = useStyles();\n  const [raw, setRaw] = useState(\"\")\n  let metar: string\n  let svg: any\n  try{\n    metar = JSON.stringify(new METAR(raw), null, 1)\n    let blob = new Blob([rawMetarToSVG(raw, \"100%\", \"100%\")], {type: 'image/svg+xml'});\n    svg = URL.createObjectURL(blob);\n  }catch(e){\n    metar = \"Invalid METAR\"\n    svg = \"\"\n  }\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <WbSunnyIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            METAR Plot Demo\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Paper elevation={4} className={classes.form}>\n        <div className={classes.title} >\n          <TextField className={classes.textarea} color=\"primary\" id=\"filled-basic\" label=\"Raw METAR\" variant=\"filled\" onChange={(event) => {setRaw(event.target.value)}}/>\n        </div>\n      </Paper>\n      <div className={classes.results}>\n        <Paper elevation={4}>\n          <Typography variant=\"h6\" className={classes.resultTitle}>\n            Parsed Metar\n          </Typography>\n          <Typography variant=\"body1\" className={classes.resultTitle}>\n            <pre>{metar}</pre>\n          </Typography>\n        </Paper>\n        <Paper elevation={4}>\n          <Typography variant=\"h6\" className={classes.resultTitle}>\n            Metar Plot\n          </Typography>\n          <img src={svg}/>\n        </Paper>\n      </div>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}