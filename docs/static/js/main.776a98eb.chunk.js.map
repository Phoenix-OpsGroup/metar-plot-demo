{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","button","width","height","title","textarea","buttonContainer","display","flexDirection","form","margin","padding","results","gridTemplateColumns","gridGap","resultTitle","flexgrow","metarbox","metarText","App","metar","svg","svgM","classes","useState","raw","setRaw","JSON","stringify","METAR","blob1","Blob","rawMetarToSVG","type","blob2","URL","createObjectURL","e","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Paper","elevation","TextField","id","label","onChange","event","target","value","href","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.776a98eb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { METAR, rawMetarToSVG } from 'metar-plot'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport WbSunnyIcon from '@material-ui/icons/WbSunny';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    button: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    title: {\n      flexGrow: 1,\n    },\n    textarea: {\n      width: \"100%\"\n    },\n    buttonContainer: {\n      display: \"flex\",\n      width: \"100%\",\n      flexGrow: 1,\n      flexDirection: \"row-reverse\"\n    },\n    form: {\n      margin: \"64px\",\n      padding: \"16px\",\n    },\n    results: {\n      display: \"grid\",\n      gridTemplateColumns: \"1fr 1fr\",\n      gridGap: \"10px\",\n      margin: \"64px\",\n    },\n    resultTitle: {\n      margin: \"8px\",\n      flexgrow: 1\n    },\n    metarbox: {\n      height: \"calc(50% - 4px)\"\n    },\n    metarText: {\n      height: \"100%\"\n    }\n  }),\n);\n\nexport default function App() {\n  const classes = useStyles();\n  const [raw, setRaw] = useState(\"\")\n  let metar: string\n  let svg: any\n  let svgM: any\n  try {\n    metar = JSON.stringify(new METAR(raw), null, 1)\n    let blob1 = new Blob([rawMetarToSVG(raw, \"350px\", \"350px\")], { type: 'image/svg+xml' });\n    let blob2 = new Blob([rawMetarToSVG(raw, \"350px\", \"350px\", true)], { type: 'image/svg+xml' })\n    svg = URL.createObjectURL(blob1);\n    svgM = URL.createObjectURL(blob2)\n  } catch (e) {\n    metar = \"Invalid METAR\"\n    svg = \"\"\n  }\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <WbSunnyIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            METAR Plot Demo\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Paper elevation={4} className={classes.form}>\n        <div className={classes.title} >\n          <TextField className={classes.textarea} color=\"primary\" id=\"filled-basic\"\n            label=\"Raw METAR\" variant=\"filled\" onChange={(event) => { setRaw(event.target.value) }} />\n        </div>\n        <a href=\"http://aviationweather.gov/metar/data\">NOAA Sample data</a>\n      </Paper>\n      <div className={classes.results}>\n        <div>\n          <Paper elevation={4} className={classes.metarText}>\n            <Typography variant=\"h6\" className={classes.resultTitle}>\n              Parsed Metar\n            </Typography>\n            <Typography variant=\"body1\" className={classes.resultTitle}>\n              <pre>{metar}</pre>\n            </Typography>\n          </Paper>\n        </div>\n        <div>\n          <Paper elevation={4} className={classes.metarbox}>\n            <Typography variant=\"h6\" className={classes.resultTitle}>\n              Metar Plot (ðŸ‡ºðŸ‡¸)\n          </Typography>\n            <img src={svg} />\n          </Paper>\n          <Paper elevation={4} className={classes.metarbox}>\n            <Typography variant=\"h6\" className={classes.resultTitle}>\n              Metar Plot (ðŸ‡ºðŸ‡³)\n          </Typography>\n            <img src={svgM} />\n          </Paper>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}